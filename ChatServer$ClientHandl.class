// Source code is decompiled from a .class file using FernFlower decompiler.
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.Iterator;

class ChatServer$ClientHandler extends Thread {
   private Socket socket;
   private PrintWriter out;
   private BufferedReader in;
   private String clientName;

   public ChatServer$ClientHandler(Socket var1) {
      this.socket = var1;
   }

   public void run() {
      boolean var17 = false;

      label172: {
         try {
            var17 = true;
            this.in = new BufferedReader(new InputStreamReader(this.socket.getInputStream()));
            this.out = new PrintWriter(this.socket.getOutputStream(), true);
            synchronized(ChatServer.clientWriters) {
               ChatServer.clientWriters.add(this.out);
            }

            this.out.println("Enter your name:");
            this.clientName = this.in.readLine();
            this.broadcast("User  " + this.clientName + " has joined the chat.");

            String var1;
            while((var1 = this.in.readLine()) != null) {
               System.out.println("Received: " + var1);
               this.broadcast(this.clientName + ": " + var1);
            }

            var17 = false;
            break label172;
         } catch (IOException var25) {
            var25.printStackTrace();
            var17 = false;
         } finally {
            if (var17) {
               try {
                  this.socket.close();
               } catch (IOException var19) {
                  var19.printStackTrace();
               }

               synchronized(ChatServer.clientWriters) {
                  ChatServer.clientWriters.remove(this.out);
               }

               this.broadcast("User  " + this.clientName + " has left the chat.");
            }
         }

         try {
            this.socket.close();
         } catch (IOException var21) {
            var21.printStackTrace();
         }

         synchronized(ChatServer.clientWriters) {
            ChatServer.clientWriters.remove(this.out);
         }

         this.broadcast("User  " + this.clientName + " has left the chat.");
         return;
      }

      try {
         this.socket.close();
      } catch (IOException var23) {
         var23.printStackTrace();
      }

      synchronized(ChatServer.clientWriters) {
         ChatServer.clientWriters.remove(this.out);
      }

      this.broadcast("User  " + this.clientName + " has left the chat.");
   }

   private void broadcast(String var1) {
      synchronized(ChatServer.clientWriters) {
         Iterator var3 = ChatServer.clientWriters.iterator();

         while(var3.hasNext()) {
            PrintWriter var4 = (PrintWriter)var3.next();
            var4.println(var1);
         }

      }
   }
}








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































